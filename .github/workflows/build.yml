name: Build project

on: [push]

jobs:
  build:
    permissions:
      contents: write
      issues: read

    runs-on: ubuntu-latest

    env:
      ZIG_VERSION: 0.13.0

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Zig
        run: |
          wget https://ziglang.org/download/$ZIG_VERSION/zig-linux-x86_64-$ZIG_VERSION.tar.xz
          tar -xf zig-linux-x86_64-$ZIG_VERSION.tar.xz
          mv zig-linux-x86_64-$ZIG_VERSION ~/zig
          echo "$HOME/zig" >> $GITHUB_PATH

      - name: Check Zig version
        run: zig version

      - name: Create bin/ directory
        run: mkdir bin

      - name: Build Windows X86_64
        run: |
          zig cc writeLicense.c main.c -target x86_64-windows-gnu -O2 -o bin/windows_x86_64.exe
          rm -rf bin/windows_x86_64.pdb

      - name: Build Windows ARM64
        run: |
          zig cc writeLicense.c main.c -target aarch64-windows-gnu -O2 -o bin/windows_arm64.exe
          rm -rf bin/windows_arm64.pdb

      - name: Build MacOS ARM64
        run: zig cc writeLicense.c main.c -target aarch64-macos -O2 -o bin/macos_arm64

      - name: Build MacOS X86_64
        run: zig cc writeLicense.c main.c -target x86_64-macos -O2 -o bin/macos_x86_64

      - name: Build Linux ARM64
        run: zig cc writeLicense.c main.c -target aarch64-linux-gnu -O2 -o bin/linux_arm64

      - name: Build Linux X86_64
        run: zig cc writeLicense.c main.c -target x86_64-linux-gnu -O2 -o bin/linux_x86_64

      - name: Upload binaries
        uses: actions/upload-artifact@v4
        with:
          name: binaries
          path: bin/

      - name: Get the latest tag
        id: semver
        run: |
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          major=$(echo $latest_tag | grep -oE '^v([0-9]+)\.' | grep -oE '[0-9]+')
          minor=$(echo $latest_tag | grep -oE '\.([0-9]+)\.' | grep -oE '[0-9]+')
          patch=$(echo $latest_tag | grep -oE '\.([0-9]+)$' | grep -oE '[0-9]+')
          if [[ -z "$major" ]]; then major=0; fi
          if [[ -z "$minor" ]]; then minor=0; fi
          if [[ -z "$patch" ]]; then patch=0; fi
          next_patch=$((patch + 1))
          next_version="v$major.$minor.$next_patch"
          echo "::set-output name=next_version::$next_version"

      - name: Create tag
        run: git tag ${{ steps.semver.outputs.next_version }}

      - name: Push tag
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          tags: true

      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.semver.outputs.next_version }}
          name: Release ${{ steps.semver.outputs.next_version }}
          generate_release_notes: true
          files: bin/*
